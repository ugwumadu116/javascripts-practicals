function smallestCommons(arr) {
  let range = arr.sort((a,b)=> a-b)
  let newArr = []
  for(let i = range[0]; i<=range[1]; i++){
  	newArr.push(i)
  }
  let LCM = 0
  let x = true
  while(x){
  	LCM++
  	for(let j =newArr[0]; j<=newArr[newArr.length-1]; j++){
  		if(LCM%j !== 0){
  			break;
  		}
  		else if(j == newArr[newArr.length-1]){
  			x = false
  		}
  	}
  }
  return LCM
}
console.log(smallestCommons([1,5]))
console.log(smallestCommons([5,1]))
console.log(smallestCommons([10,2]))
console.log(smallestCommons([1,13]))
console.log(smallestCommons([23,18]))
console.log(smallestCommons([10,3]))

ORORORORORORORORRORORORRORORORRORORORORRORORRO
function smallestCommons(arr) {
  // Sort array from greater to lowest
  // This line of code was from Adam Doyle (http://github.com/Adoyle2014)
  arr.sort(function(a, b) {
    return b - a;
  });

  // Create new array and add all values from greater to smaller from the original array.
  var newArr = [];
  for (var i = arr[0]; i >= arr[1]; i--) {
    newArr.push(i);
  }

  // Variables needed declared outside the loops.
  var quot = 0;
  var loop = 1;
  var n;

  // run code while n is not the same as the array lenght.
  do {
    quot = newArr[0] * loop * newArr[1];
    for (n = 2; n < newArr.length; n++) {
      if (quot % newArr[n] !== 0) {
        break;
      }
    }

    loop++;
  } while (n !== newArr.length);

  return quot;
}

smallestCommons([1, 13]);
